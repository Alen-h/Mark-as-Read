---
description: 
globs: 
alwaysApply: true
---
# Mark as Read Chrome Extension - Development Rules

## 🌍 Language Requirements
**ALL CONTENT MUST BE IN ENGLISH** - UI text, code comments, documentation, error messages, variable names, and all other text.

## 🏗️ Project Architecture

### File Structure
```
Mark as Read/
├── manifest.json          # Extension configuration
├── popup.html/css/js      # Popup interface components
├── background.js          # Background service worker
├── content.js             # Content script injection
├── history.html/css/js    # History page components
├── styles.css             # Global stylesheet
└── icons/                 # Icon assets
```

### Chrome Extension Standards
- Use Manifest V3 APIs
- Implement proper permissions and security practices
- Follow Chrome Web Store guidelines
- Ensure cross-browser compatibility

## 💻 Development Guidelines

### Core Features
- **Page Marking**: One-click page marking with confirmation messages
- **Visual Indicators**: Show "READ" badges on marked pages
- **Statistics**: Display read count ("Total Read: X pages")
- **History Management**: History page with proper navigation
- **Sync Storage**: Use Chrome sync storage with error handling

### Code Quality
```javascript
// Use descriptive English names and comments
async function getCurrentTabInfo() {
    try {
        const [tab] = await chrome.tabs.query({active: true, currentWindow: true});
        return { url: tab.url, title: tab.title, id: tab.id };
    } catch (error) {
        console.error('Failed to get tab information:', error);
        throw error;
    }
}
```

### Variable Naming
Use descriptive English names: `markAsReadButton`, `totalReadCount`, `pageHistory`

## 🔧 Development Workflow

### Code Review Checklist
- [ ] Chrome extension APIs used correctly
- [ ] Proper error handling implemented
- [ ] Responsive design works across screen sizes
- [ ] Data storage and sync functionality working

### Pre-deployment Checks
- [ ] Test extension functionality across different websites
- [ ] Validate manifest.json configuration
- [ ] Verify icon assets and Chrome Web Store compliance
- [ ] Test installation and uninstallation process